#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Aug  4 13:24:17 2009

import wx

# begin wxGlade: extracode
# end wxGlade



class wxVScrolledWindow(wx.ScrolledWindow):
    def __init__(self, *args, **kwds):
        # content of this block not found: did you rename this class?
        pass

    def __set_properties(self):
        # content of this block not found: did you rename this class?
        pass

    def __do_layout(self):
        # content of this block not found: did you rename this class?
        pass

# end of class wxVScrolledWindow


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_result = wx.Panel(self, -1)
        self.panel_services = wx.Panel(self, -1)
        self.tab_services = wx.Notebook(self.panel_services, -1, style=0)
        self.decode_tab = wx.Panel(self.tab_services, -1)
        self.panel_decode = wx.Panel(self.decode_tab, -1)
        self.client_tab = wx.Panel(self.tab_services, -1)
        self.panel_client_args = wx.ScrolledWindow(self.client_tab, -1, style=wx.TAB_TRAVERSAL)
        self.server_tab = wx.ScrolledWindow(self.tab_services, -1, style=wx.TAB_TRAVERSAL)
        self.panel_server_args = wx.ScrolledWindow(self.server_tab, -1, style=wx.TAB_TRAVERSAL)
        
        # Menu Bar
        self.fr_main_menubar = wx.MenuBar()
        self.File = wx.Menu()
        self.About = wx.MenuItem(self.File, wx.NewId(), "&About", "", wx.ITEM_NORMAL)
        self.File.AppendItem(self.About)
        self.File.AppendSeparator()
        self.Exit = wx.MenuItem(self.File, wx.NewId(), "&Exit", "", wx.ITEM_NORMAL)
        self.File.AppendItem(self.Exit)
        self.fr_main_menubar.Append(self.File, "&File")
        self.SetMenuBar(self.fr_main_menubar)
        # Menu Bar end
        self.fr_main_statusbar = self.CreateStatusBar(1, 0)
        self.lb_gateway_url = wx.StaticText(self, -1, "Gateway URL")
        self.tx_gateway_url = wx.TextCtrl(self, -1, "http://localhost:12004", style=wx.TE_AUTO_URL)
        self.bt_server_start = wx.ToggleButton(self, -1, "Start Server")
        self.tx_server_port = wx.TextCtrl(self, -1, "10001")
        self.bt_client_start = wx.ToggleButton(self, -1, "Start Client")
        self.tx_client_ip = wx.TextCtrl(self, -1, "127.0.0.1")
        self.tx_client_port = wx.TextCtrl(self, -1, "10001")
        self.lb_user = wx.StaticText(self, -1, "User")
        self.tx_user = wx.TextCtrl(self, -1, "acp")
        self.lb_password = wx.StaticText(self, -1, "Password")
        self.tx_password = wx.TextCtrl(self, -1, "acp", style=wx.TE_PASSWORD)
        self.lb_timeout = wx.StaticText(self, -1, "Timeout (sec.)")
        self.tx_timeout = wx.TextCtrl(self, -1, "60")
        self.lb_server_command = wx.StaticText(self.server_tab, -1, "Command")
        self.cb_server_commands = wx.ComboBox(self.server_tab, -1, choices=[], style=wx.CB_DROPDOWN)
        self.bt_server_exec = wx.Button(self.server_tab, -1, "Execute")
        self.lb_client_command = wx.StaticText(self.client_tab, -1, "Command")
        self.cb_client_commands = wx.ComboBox(self.client_tab, -1, choices=[], style=wx.CB_DROPDOWN)
        self.bt_client_exec = wx.Button(self.client_tab, -1, "Execute")
        self.cb_pdu_predef = wx.ComboBox(self.panel_decode, -1, choices=[], style=wx.CB_DROPDOWN)
        self.tx_pdu_hex = wx.TextCtrl(self.panel_decode, -1, "")
        self.bt_decode = wx.Button(self.panel_decode, -1, "Decode")
        self.tree_pdu = wx.TreeCtrl(self.decode_tab, -1, style=wx.TR_HAS_BUTTONS|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.tx_result = wx.TextCtrl(self.panel_result, -1, "", style=wx.TE_MULTILINE|wx.HSCROLL)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnAbout, self.About)
        self.Bind(wx.EVT_MENU, self.OnExit, self.Exit)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("ACP 245 Emulator - DEMO")
        self.SetSize((894, 591))
        self.fr_main_statusbar.SetStatusWidths([-1])
        # statusbar fields
        fr_main_statusbar_fields = [""]
        for i in range(len(fr_main_statusbar_fields)):
            self.fr_main_statusbar.SetStatusText(fr_main_statusbar_fields[i], i)
        self.tx_gateway_url.SetMinSize((300, 23))
        self.panel_server_args.SetScrollRate(10, 10)
        self.server_tab.SetScrollRate(10, 10)
        self.panel_client_args.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sz_main = wx.BoxSizer(wx.VERTICAL)
        sz_result = wx.BoxSizer(wx.VERTICAL)
        sz_services = wx.BoxSizer(wx.HORIZONTAL)
        sz_decode = wx.BoxSizer(wx.VERTICAL)
        sz_decode_input = wx.FlexGridSizer(1, 3, 0, 0)
        sz_client_panel = wx.BoxSizer(wx.VERTICAL)
        grid_client_args = wx.FlexGridSizer(3, 3, 3, 3)
        sz_client_commands = wx.BoxSizer(wx.HORIZONTAL)
        sz_server_panel = wx.BoxSizer(wx.VERTICAL)
        grid_server_args = wx.FlexGridSizer(3, 3, 3, 3)
        sz_server_commands = wx.BoxSizer(wx.HORIZONTAL)
        sz_config = wx.BoxSizer(wx.VERTICAL)
        sz_auth = wx.BoxSizer(wx.HORIZONTAL)
        sz_service_cfg = wx.BoxSizer(wx.HORIZONTAL)
        sz_gateway_cfg = wx.BoxSizer(wx.HORIZONTAL)
        sz_gateway_cfg.Add(self.lb_gateway_url, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sz_gateway_cfg.Add(self.tx_gateway_url, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sz_config.Add(sz_gateway_cfg, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sz_service_cfg.Add(self.bt_server_start, 0, wx.ADJUST_MINSIZE, 0)
        sz_service_cfg.Add(self.tx_server_port, 0, wx.ADJUST_MINSIZE, 0)
        sz_service_cfg.Add(self.bt_client_start, 0, wx.ADJUST_MINSIZE, 0)
        sz_service_cfg.Add(self.tx_client_ip, 0, wx.ADJUST_MINSIZE, 0)
        sz_service_cfg.Add(self.tx_client_port, 0, wx.ADJUST_MINSIZE, 0)
        sz_config.Add(sz_service_cfg, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sz_auth.Add(self.lb_user, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        sz_auth.Add(self.tx_user, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sz_auth.Add(self.lb_password, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        sz_auth.Add(self.tx_password, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sz_auth.Add(self.lb_timeout, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        sz_auth.Add(self.tx_timeout, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sz_config.Add(sz_auth, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sz_main.Add(sz_config, 1, 0, 0)
        sz_server_commands.Add(self.lb_server_command, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sz_server_commands.Add(self.cb_server_commands, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sz_server_commands.Add(self.bt_server_exec, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sz_server_panel.Add(sz_server_commands, 0, 0, 0)
        self.panel_server_args.SetSizer(grid_server_args)
        sz_server_panel.Add(self.panel_server_args, 1, wx.EXPAND, 0)
        self.server_tab.SetSizer(sz_server_panel)
        sz_client_commands.Add(self.lb_client_command, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sz_client_commands.Add(self.cb_client_commands, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sz_client_commands.Add(self.bt_client_exec, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sz_client_panel.Add(sz_client_commands, 0, 0, 0)
        self.panel_client_args.SetSizer(grid_client_args)
        sz_client_panel.Add(self.panel_client_args, 1, wx.EXPAND, 0)
        self.client_tab.SetSizer(sz_client_panel)
        sz_decode_input.Add(self.cb_pdu_predef, 0, wx.ADJUST_MINSIZE, 0)
        sz_decode_input.Add(self.tx_pdu_hex, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        sz_decode_input.Add(self.bt_decode, 0, wx.ALIGN_RIGHT, 0)
        self.panel_decode.SetSizer(sz_decode_input)
        sz_decode_input.AddGrowableCol(1)
        sz_decode.Add(self.panel_decode, 0, wx.EXPAND, 0)
        sz_decode.Add(self.tree_pdu, 1, wx.EXPAND, 0)
        self.decode_tab.SetSizer(sz_decode)
        self.tab_services.AddPage(self.server_tab, "Server")
        self.tab_services.AddPage(self.client_tab, "Client")
        self.tab_services.AddPage(self.decode_tab, "Decode")
        sz_services.Add(self.tab_services, 1, wx.EXPAND, 0)
        self.panel_services.SetSizer(sz_services)
        sz_main.Add(self.panel_services, 3, wx.EXPAND, 0)
        sz_result.Add(self.tx_result, 0, wx.EXPAND, 0)
        self.panel_result.SetSizer(sz_result)
        sz_main.Add(self.panel_result, 1, wx.EXPAND, 0)
        self.SetSizer(sz_main)
        self.Layout()
        # end wxGlade

    def ID_EXIT(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `ID_EXIT' not implemented"
        event.Skip()

    def onAbout(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `onAbout' not implemented"
        event.Skip()

    def onExit(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `onExit' not implemented"
        event.Skip()

    def OnAbout(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnAbout' not implemented"
        event.Skip()

    def OnExit(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnExit' not implemented"
        event.Skip()

# end of class MainFrame


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # content of this block not found: did you rename this class?
        pass

    def __set_properties(self):
        # content of this block not found: did you rename this class?
        pass

    def __do_layout(self):
        # content of this block not found: did you rename this class?
        pass

# end of class MyFrame


class AcpEmuWx(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        fr_main = MyFrame(None, -1, "")
        self.SetTopWindow(fr_main)
        fr_main.Show()
        return 1

# end of class AcpEmuWx

if __name__ == "__main__":
    acpemuwx = AcpEmuWx(0)
    acpemuwx.MainLoop()
